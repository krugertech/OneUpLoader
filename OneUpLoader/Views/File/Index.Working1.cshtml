@{
    ViewBag.Title = "File Uploader";
}

@*<h2>@ViewBag.Title.</h2>
<p class="text-success">@ViewBag.StatusMessage</p>
<div>
    <h4>Change your account settings</h4>
    <hr />        
    Hello world
</div>*@

<script language="javascript">

    // Check for the various File API support.
    if (window.File && window.FileReader && window.FileList && window.Blob)
    {
        // Great success! All the File APIs are supported.
        //alert('supported');
    } else
    {
        alert('The File APIs are not fully supported in this browser.');
    }

    var x = ["abc", "def", "ghi", "klm"];

    var slice = x.slice(0, 1);
    //alert(slice);
    // a. above works. 

    var uploadComplete = function () {
        //var formData = new FormData();
        //formData.append('fileName', file.name);
        //formData.append('completed', true);

        //var xhr2 = new XMLHttpRequest();
        //xhr2.open("POST", "/Files/UploadComplete", true); //combine the chunks together
        //xhr2.send(formData);
        alert('Complete');
    }

    function upload(inputFile)
    {
        var sendAsync = true;

        //uploadFile(inputFile.files[0]);
        var file = inputFile.files[0];

        //var blob1 = file.slice(0, 1);
        //alert(blob1);

        var chunkSize = 32768; // sample chunk sizes.        
        var uploadFileLength = file.size; // blob.size;        

        //upload content
        var start = 0;
        var end = chunkSize;
        var completedChunks = 0;
        var totalChunks = uploadFileLength % chunkSize == 0 ? uploadFileLength / chunkSize : Math.floor(uploadFileLength / chunkSize) + 1;
        var error = false;

        while (start < uploadFileLength)
        {
            if (error === true)
                break;

            var chunk = file.slice(start, end);
            //var sliceFunction = (self.body.slice ? 'slice' : (self.body.mozSlice ? 'Array.prototype.slice' : 'webkitSlice'));
            //var chunk = self.body[sliceFunction](start, end);
            var xhr = new XMLHttpRequest();
            xhr.onload = function () 
            {
                completedChunks = completedChunks + 1;
                if (completedChunks === totalChunks) 
                {
                    uploadComplete();
                }
            };
            xhr.open("POST", "/File/Upload?fileName=" + file.name, sendAsync);
            xhr.onreadystatechange = function (oEvent)
            {
                if (xhr.readyState === 4) {
                    if (xhr.status === 200) {
                        console.log(xhr.responseText);
                    } else {
                        console.log("Error", xhr.statusText);
                        error = true;
                    }
                }
            }
            xhr.onprogress = function (event)
            {
                alert(event);
                if (event.lengthComputable)
                {
                    var percent = event.loaded / event.total * 100;
                    $("#progress").html(percent + "%");                    
                }
            }
            xhr.error = function (event)
            {
                alert("An error occoured!");
            }
            xhr.send(chunk);

            start = end;
            end = start + chunkSize;
        }
    }


    //var onerror = function (event) {
    //    alert("An error occoured!");
    //}
    //var onprogressupdate = function (event) {

    //    if (event.lengthComputable) {

    //        var percent = event.loaded / event.total * 100;

    //        $("#progress").html(percent + "%");

    //    }

    //}
    //var onreadystatechange = function (event) {

    //    if (request.status == 200 && request.readyState == 4) {

    //        alert("Uploaded!");

    //        $("#progress").hide();
    //        $("#progress").html("");

    //    }
    //    else {
    //        alert("Alternative state and/or status");
    //        console.log("state: " + request.state);
    //        console.log("readyState: " + request.readyState);
    //    }

    //}

  
    //if (!ArrayBuffer.prototype.slice) {        
    //    //Returns a new ArrayBuffer whose contents are a copy of this ArrayBuffer's
    //    //bytes from `begin`, inclusive, up to `end`, exclusive
    //    ArrayBuffer.prototype.slice = function (begin, end) {
    //        //If `begin` is unspecified, Chrome assumes 0, so we do the same
    //        if (begin === void 0) {
    //            begin = 0;
    //        }

    //        //If `end` is unspecified, the new ArrayBuffer contains all
    //        //bytes from `begin` to the end of this ArrayBuffer.
    //        if (end === void 0) {
    //            end = this.byteLength;
    //        }

    //        //Chrome converts the values to integers via flooring
    //        begin = Math.floor(begin);
    //        end = Math.floor(end);

    //        //If either `begin` or `end` is negative, it refers to an
    //        //index from the end of the array, as opposed to from the beginning.
    //        if (begin < 0) {
    //            begin += this.byteLength;
    //        }
    //        if (end < 0) {
    //            end += this.byteLength;
    //        }

    //        //The range specified by the `begin` and `end` values is clamped to the 
    //        //valid index range for the current array.
    //        begin = Math.min(Math.max(0, begin), this.byteLength);
    //        end = Math.min(Math.max(0, end), this.byteLength);

    //        //If the computed length of the new ArrayBuffer would be negative, it 
    //        //is clamped to zero.
    //        if (end - begin <= 0) {
    //            return new ArrayBuffer(0);
    //        }

    //        var result = new ArrayBuffer(end - begin);
    //        var resultBytes = new Uint8Array(result);
    //        var sourceBytes = new Uint8Array(this, begin, end - begin);

    //        resultBytes.set(sourceBytes);

    //        return result;
    //    };
    //}

</script>

<div class="jumbotron">
    Upload
</div>

<div class="row">
    <div class="col-md-4">
        <p>            
            @*<span class="btn btn-default btn-file">
                <input type="file" id="myfile" name="myfile"/>
            </span>*@

            <label class="btn btn-default" for="myfile">
                <input id="myfile" type="file" style="display:none"
                       onchange="$('#upload-file-info').html(this.files[0].name)">
                Choose file...
            </label>
            <span class='label label-info' id="upload-file-info"></span>            
            <br/>
            <input type="button" id="btnUpload" name="btnUpload" onclick="upload(myfile);" value="Upload" class="btn btn-primary" />
            <br/>
            <span id="progress" name="progress" class="progress"></span>
        </p>
    </div>
</div>
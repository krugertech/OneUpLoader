@{
    ViewBag.Title = "File Uploader";
}

@*<h2>@ViewBag.Title.</h2>
<p class="text-success">@ViewBag.StatusMessage</p>
<div>
    <h4>Change your account settings</h4>
    <hr />        
    Hello world
</div>*@

<script language="javascript">

    // Check for the various File API support.
    if (window.File && window.FileReader && window.FileList && window.Blob)
    {
        // Great success! All the File APIs are supported.
        //alert('supported');
    } else
    {
        alert('The File APIs are not fully supported in this browser.');
    }

    function transfer_complete(e) { console.log("The transfer is complete."); }
    function transfer_failed(e) { console.log("An error occurred while transferring the file."); }
    function transfer_canceled(e) { console.log("The transfer has been canceled by the user."); }
    function progressUpdate(event)
    {
        // Not relative to chunked upload.
        //if (event.lengthComputable)
        //{
        //    //alert(event);
        //    var percent = event.loaded / event.total * 100;
        //    $("#progress").html(percent + "%");                    
        //} else {
        //    $("#progress").html($("#progress").html() + "...");
        //}
   }
    function upload(inputFile)
    {
        // Get some file info
        var file = inputFile.files[0];
        var chunkSize = 1024768; // 1MByte
        var start = 0;
        var end = chunkSize;
        var completedChunks = 0;
        var totalChunks = file.size % chunkSize === 0 ? file.size / chunkSize : Math.floor(file.size / chunkSize) + 1;        

        // Store variables in easy to manage object/class
        var objFile = {};        
        objFile.file = file;        
        objFile.start = start;
        objFile.end = end;
        objFile.completedChunks = completedChunks;
        objFile.totalChunks = totalChunks;
        objFile.chunkSize = chunkSize;
        objFile.error = false;

        uploadFile(objFile);
    }
    function uploadFile(objFile)
    {
        var chunk = objFile.file.slice(objFile.start, objFile.end);

        var xhr = new XMLHttpRequest();
        xhr.addEventListener("load", transfer_complete, false);
        xhr.addEventListener("error", transfer_failed, false);
        xhr.addEventListener("abort", transfer_canceled, false);
        if (xhr.upload)
            xhr.upload.onprogress = progressUpdate;
        xhr.onprogress = progressUpdate;
        xhr.onreadystatechange = function () {
            if (objFile.error)
                return;

            if (xhr.readyState === 4) {
                //if (xhr.status >= 200 && xhr.status < 300)
                if (xhr.status === 200) {
                    objFile.start = objFile.end;
                    objFile.end = objFile.start + objFile.chunkSize;
                    objFile.completedChunks++;

                    // Update progress.
                    var percent = Math.round((objFile.completedChunks / objFile.totalChunks * 100));
                    $("#progress").html(percent + "%");

                    if (objFile.start < objFile.file.size)
                        uploadNext(xhr, objFile);
                } else {
                    console.log("Error", xhr.statusText);
                    objFile.error = true;
                }
            }
        }

        xhr.open("POST", "/File/Upload?fileName=" + objFile.file.name, true);
        xhr.send(chunk);
    }
    function uploadNext(xhr, objFile)
    { 
        var chunk = objFile.file.slice(objFile.start, objFile.end);

        this.xhr = new XMLHttpRequest();
        xhr.addEventListener("load", transfer_complete, false);
        xhr.addEventListener("error", transfer_failed, false);
        xhr.addEventListener("abort", transfer_canceled, false);
        if (xhr.upload)
            xhr.upload.onprogress = progressUpdate;
        xhr.onprogress = progressUpdate;
        //xhr.onreadystatechange = request_complete(xhr, objFile);
        xhr.onreadystatechange = function () {
            if (objFile.error)
                return;

            if (xhr.readyState === 4) {
                //if (xhr.status >= 200 && xhr.status < 300)
                if (xhr.status === 200) {
                    objFile.start = objFile.end;
                    objFile.end = objFile.start + objFile.chunkSize;
                    objFile.completedChunks++;

                    // Update progress.
                    var percent = Math.round((objFile.completedChunks / objFile.totalChunks * 100));
                    $("#progress").html(percent + "%");

                    if (objFile.start < objFile.file.size)
                        uploadNext(xhr, objFile);
                } else {
                    console.log("Error", xhr.statusText);
                    objFile.error = true;
                }
            }
        }

        xhr.open("POST", "/File/Upload?fileName=" + objFile.file.name, true);
        xhr.send(chunk);
    }


    //var onerror = function (event) {
    //    alert("An error occoured!");
    //}
    //var onprogressupdate = function (event) {

    //    if (event.lengthComputable) {

    //        var percent = event.loaded / event.total * 100;

    //        $("#progress").html(percent + "%");

    //    }

    //}
    //var onreadystatechange = function (event) {

    //    if (request.status == 200 && request.readyState == 4) {

    //        alert("Uploaded!");

    //        $("#progress").hide();
    //        $("#progress").html("");

    //    }
    //    else {
    //        alert("Alternative state and/or status");
    //        console.log("state: " + request.state);
    //        console.log("readyState: " + request.readyState);
    //    }

    //}

  
    //if (!ArrayBuffer.prototype.slice) {        
    //    //Returns a new ArrayBuffer whose contents are a copy of this ArrayBuffer's
    //    //bytes from `begin`, inclusive, up to `end`, exclusive
    //    ArrayBuffer.prototype.slice = function (begin, end) {
    //        //If `begin` is unspecified, Chrome assumes 0, so we do the same
    //        if (begin === void 0) {
    //            begin = 0;
    //        }

    //        //If `end` is unspecified, the new ArrayBuffer contains all
    //        //bytes from `begin` to the end of this ArrayBuffer.
    //        if (end === void 0) {
    //            end = this.byteLength;
    //        }

    //        //Chrome converts the values to integers via flooring
    //        begin = Math.floor(begin);
    //        end = Math.floor(end);

    //        //If either `begin` or `end` is negative, it refers to an
    //        //index from the end of the array, as opposed to from the beginning.
    //        if (begin < 0) {
    //            begin += this.byteLength;
    //        }
    //        if (end < 0) {
    //            end += this.byteLength;
    //        }

    //        //The range specified by the `begin` and `end` values is clamped to the 
    //        //valid index range for the current array.
    //        begin = Math.min(Math.max(0, begin), this.byteLength);
    //        end = Math.min(Math.max(0, end), this.byteLength);

    //        //If the computed length of the new ArrayBuffer would be negative, it 
    //        //is clamped to zero.
    //        if (end - begin <= 0) {
    //            return new ArrayBuffer(0);
    //        }

    //        var result = new ArrayBuffer(end - begin);
    //        var resultBytes = new Uint8Array(result);
    //        var sourceBytes = new Uint8Array(this, begin, end - begin);

    //        resultBytes.set(sourceBytes);

    //        return result;
    //    };
    //}

</script>

<div class="jumbotron">
    Upload
</div>

<div class="row">
    <div class="col-md-4">
        <p>            
            @*<span class="btn btn-default btn-file">
                <input type="file" id="myfile" name="myfile"/>
            </span>*@

            <label class="btn btn-default" for="myfile">
                <input id="myfile" type="file" style="display:none"
                       onchange="$('#upload-file-info').html(this.files[0].name)">
                Choose file...
            </label>
            <span class='label label-info' id="upload-file-info"></span>            
            <br/>
            <input type="button" id="btnUpload" name="btnUpload" onclick="upload(myfile);" value="Upload" class="btn btn-primary" />
            <br/>
            <span id="progress" name="progress" class="progress"></span>
            <br />
            <span id="complete" name="complete" class="complete"></span>
        </p>
    </div>
</div>
@{
    ViewBag.Title = "File Uploader";
}

@* 
TODO
1. [...]Check file details before upload. Disable start button.
2. When partial file found on server, resume.
3. When upload fails, change progress to red. Show info under status. Change button from start to resume. 
4. [...]Resume a failed file. Check the index has previously completed. 
5. Record all errors in the fileObject collection
6. look at making direct calls
7. [done] See if you can merge upload and upload file (similar logic)
*@

<script src="~/Scripts/spark-md5.js"></script>
<script language="javascript">    
    // Global template variable    
    var findex = 0; // store the unique index of each element generated.
    var fileCollection = {};

    // Check for the various File API support.
    if (!(XMLHttpRequest && window.File && window.FileReader && window.FileList && window.Blob))
    {
        alert('The File APIs is not fully supported in your browser.');
    }

    function uploadAll() {
        // TODO: replace input.files with custom object containing appened browser files.
        var files = document.getElementById("inputFile").files;

        for (var i = 0; i < files.length; i++) {
            setTimeout(upload(i), 50);            
        }
    }

    function upload(fileIndex)
    {
        // TODO: replace input.files with custom object containing appended browser files.
        // Get some file info.
        var file = document.getElementById("inputFile").files[fileIndex];

        // Scope variables.
        var chunkSize = 512384; // 0.5MByte chunks

        // Store variables in easy to manage object/class.
        var objFile = {};
        objFile.index = fileIndex;
        objFile.file = file;
        objFile.start = 0;
        objFile.end = chunkSize;
        objFile.completedChunks = 0;
        objFile.totalChunks = file.size % chunkSize === 0 ? file.size / chunkSize : Math.floor(file.size / chunkSize) + 1;
        objFile.chunkSize = chunkSize;
        objFile.error = false;
        objFile.serverFile = null;
        
        verifyFile(objFile);
    }

    function verifyFile(objFile) {  
        $.ajax({
            type: 'get',
            dataType: 'json',
            cache: false,
            url: '/File/Details?name=' + fixedEncodeURIComponent(objFile.file.name) + '&size=' + objFile.file.size,
            //data: null,//{ keyid: 1, newval: 10 },
            success: function (response, textStatus, jqXHR) {

                var serverFile = {
                    exists : false,
                    size : 0,
                    hash : ''           
                };
                serverFile.exists = response.exists;
                serverFile.size = response.size;
                serverFile.hash = response.hash;

                // Resume when file exists.
                if (serverFile.exists)
                {
                    // Don't resume if file already uploaded.
                    if (objFile.file.size === serverFile.size) {
                        // TODO: Set file upload to complete.
                        alert('local and server file size matches.');
                        return;                        
                    }

                    objFile.start = serverFile.size;
                    objFile.end = objFile.start + objFile.chunkSize;
                    objFile.completedChunks = serverFile.size % objFile.chunkSize === 0 ? serverFile.size / objFile.chunkSize : Math.floor(serverFile.size / objFile.chunkSize) + 1;                    
                }

                objFile.serverFile = serverFile;
                uploadFile(objFile);
            },
            error: function (jqXHR, textStatus, errorThrown) {                
                $("#fileStatus" + objFile.index).text('Error (' + textStatus + '): ' + errorThrown);
                //TODO: if (file.chunk == 0) set button to start (else) set button to resume.
            },
            async: true            
        });        
    }

    function transfer_complete(e) {console.log("The transfer is complete.");}
    function transfer_failed(e) { alert('transfer failed'); console.log("An error occurred while transferring the file."); }
    function transfer_canceled(e) { console.log("The transfer has been canceled by the user."); }
    function progressUpdate(event) { }
    function uploadFile(objFile)
    {
        var chunk = objFile.file.slice(objFile.start, objFile.end);

        var xhr = new XMLHttpRequest();
        xhr.addEventListener("load", transfer_complete, false);
        xhr.addEventListener("error", transfer_failed, false);
        xhr.addEventListener("abort", transfer_canceled, false);
        if (xhr.upload)
            xhr.upload.onprogress = progressUpdate;
        xhr.onprogress = progressUpdate;
        xhr.onreadystatechange = function () {
            if (objFile.error)
                return;

            if (xhr.readyState === 4) {
                //if (xhr.status >= 200 && xhr.status < 300)
                if (xhr.status === 200) {
                    objFile.start = objFile.end;
                    objFile.end = objFile.start + objFile.chunkSize;
                    objFile.completedChunks++;

                    // Update progress.
                    var percent = Math.round((objFile.completedChunks / objFile.totalChunks * 100));                               
                    var progressElement = $("#fileProgress" + objFile.index);
                    progressElement.attr('aria-valuenow', percent);
                    progressElement.children().text(percent + '%');
                    progressElement.children().css('width', percent);

                    if (objFile.start < objFile.file.size)
                        uploadFile(objFile);
                } else {
                    console.log("Error", xhr.statusText);
                    objFile.error = true;
                }
            }
        }

        xhr.open("POST", "/File/Upload?name=" + fixedEncodeURIComponent(objFile.file.name), true);
        xhr.send(chunk);
    }
    //function uploadNextChunk(xhr, objFile)
    //{ 
    //    var chunk = objFile.file.slice(objFile.start, objFile.end);

    //    this.xhr = new XMLHttpRequest();
    //    xhr.addEventListener("load", transfer_complete, false);
    //    xhr.addEventListener("error", transfer_failed, false);
    //    xhr.addEventListener("abort", transfer_canceled, false);
    //    if (xhr.upload)
    //        xhr.upload.onprogress = progressUpdate;
    //    xhr.onprogress = progressUpdate;
    //    //xhr.onreadystatechange = request_complete(xhr, objFile);
    //    xhr.onreadystatechange = function () {
    //        if (objFile.error)
    //            return;

    //        if (xhr.readyState === 4) {
    //            //if (xhr.status >= 200 && xhr.status < 300)
    //            if (xhr.status === 200) {
    //                objFile.start = objFile.end;
    //                objFile.end = objFile.start + objFile.chunkSize;
    //                objFile.completedChunks++;

    //                // Update progress.
    //                var percent = Math.round((objFile.completedChunks / objFile.totalChunks * 100));
    //                var progressElement = $("#fileProgress" + objFile.index);
    //                progressElement.attr('aria-valuenow', percent);
    //                progressElement.children().text(percent + '%');
    //                progressElement.children().css('width', percent);

    //                if (objFile.start < objFile.file.size)
    //                    uploadNextChunk(xhr, objFile);
    //            } else {
    //                alert("Error: status=" + xhr.status + " and reason=" +  xhr.statusText);
    //                console.log("Error", xhr.statusText);
    //                objFile.error = true;
    //            }
    //        }
    //    }

    //    xhr.open("POST", "/File/Upload?fileName=" + objFile.file.name, true);
    //    xhr.send(chunk);
    //}
</script>

<div class="jumbotron">
    Upload
</div>

<style>
    .bd-example {
        padding: 1.5rem;
        margin-right: 0;
        margin-bottom: 0;
        margin-left: 0;
        border-width: .2rem;

        border: solid #f7f7f9;
        border-top-width: medium;
        border-right-width: medium;
        border-bottom-width: medium;
        border-left-width: medium;
}    

</style>

<div class="row">
   <div class="col-md-12" style="font-size: 14px;">
       <div>     
      
           <br/>      
           @*<span class="btn btn-success fileinput-button">
               <i class="glyphicon glyphicon-plus"></i>
               <span>Add files...</span>
               <input type="file" id="inputFile" name="inputFile" value="Select file"  />
           </span>*@
       </div> 
       <div class="row fileupload-buttonbar">
           <div class="col-lg-7">
               <!-- The fileinput-button span is used to style the file input field as button -->
               <label class="btn btn-default" for="inputFile">
                   <input id="inputFile" type="file" style="display:none" onchange="getFiles(this)" multiple>
                   <i class="glyphicon glyphicon-plus"></i> Choose file...
               </label>     
               <button type="submit" class="btn btn-primary" onclick="uploadAll();">
                   <i class="glyphicon glyphicon-upload"></i>
                   <span>Start upload</span>
               </button>
               <button type="reset" class="btn btn-warning">
                   <i class="glyphicon glyphicon-ban-circle"></i>
                   <span>Cancel upload</span>
               </button>
               <button type="button" class="btn btn-danger" onclick="alert('not implemented!');">
                   <i class="glyphicon glyphicon-trash"></i>
                   <span>Delete</span>
               </button>               
           </div>
           <!-- The global progress state -->
           <div class="col-lg-5 fileupload-progress fade">
               <!-- The global progress bar -->
               <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100">
                   <div class="progress-bar progress-bar-success" style="width:0%;"></div>
               </div>
               <!-- The extended global progress state -->
               <div class="progress-extended">&nbsp;</div>
           </div>
           <br />
        </div>
           <div>
               <table class="table table-responsive">
                   <thead>
                       <tr>
                           <th>#</th>
                           <th>Filename</th>
                           <th>Size</th>
                           <th>Status</th>
                           <th style="width:100px;">Progress</th>
                           <th>Actions</th>
                       </tr>
                   </thead>
                   <tbody id="tblUploadBody"></tbody>
               </table>
           </div>
       </div>
</div>

<script id="template-upload" type="text/x-tmpl">
    {% for (var i=0; i < o.length; i++) { %}
    <tr id="uiFile{%=findex%}">
        <th scope="row">{%=(findex+1)%}</th>
        <td style="word-wrap: break-word;min-width: 160px;max-width: 160px;">
            <p class="name">{%=((o[i].name.length > 40) ? o[i].name.substr(0,41) + "..." : o[i].name)%}</p>
            <strong class="error text-danger"></strong>
        </td>
        <td>
            <p class="size">{%=formatBytes(o[i].size, 2)%}</p>
        </td>
        <td>
            <p id="fileStatus{%=findex%}" class="size">Uploading (12KB/sec) </p>
        </td>
        <td style="width:100px;">
            <div id="fileProgress{%=i%}" style="min-width: 100px;max-width: 100px;" class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0">
                <div class="progress-bar progress-bar-success" style="width:0%;"></div>
            </div>
        </td>
        <td>
            <button class="btn btn-primary btn-xs start" onclick="upload({%=findex%});">
                <i class="glyphicon glyphicon-upload"></i>
                <span>Start</span>
            </button>
            <button class="btn btn-warning btn-xs cancel" disabled onclick="cancel({%=findex%});">
                <i class="glyphicon glyphicon-ban-circle"></i>
                <span>Stop</span>
            </button>
        </td>
    </tr>
    {%findex++;%}
    {% } %}  
    
</script>

<script>
    /*
     * JavaScript Templates
     * https://github.com/blueimp/JavaScript-Templates
     *
     * Copyright 2011, Sebastian Tschan
     * https://blueimp.net
     *
     * Licensed under the MIT license:
     * https://opensource.org/licenses/MIT
     *
     * Inspired by John Resig's JavaScript Micro-Templating:
     * http://ejohn.org/blog/javascript-micro-templating/
     */

    /* global define */
    ;
    (function($) {
        'use strict'
        var tmpl = function(str, data) {
            var f = !/[^\w\-\.:]/.test(str)
                ? tmpl.cache[str] = tmpl.cache[str] || tmpl(tmpl.load(str))
                : new Function(// eslint-disable-line no-new-func
                    tmpl.arg + ',tmpl',
                    'var _e=tmpl.encode' +
                    tmpl.helper +
                    ",_s='" +
                    str.replace(tmpl.regexp, tmpl.func) +
                    "';return _s;"
                )
            return data
                ? f(data, tmpl)
                : function(data) {
                    return f(data, tmpl)
                }
        }
        tmpl.cache = {}
        tmpl.load = function(id) {
            return document.getElementById(id).innerHTML
        }
        tmpl.regexp = /([\s'\\])(?!(?:[^{]|\{(?!%))*%\})|(?:\{%(=|#)([\s\S]+?)%\})|(\{%)|(%\})/g
        tmpl.func = function(s, p1, p2, p3, p4, p5) {
            if (p1) { // whitespace, quote and backspace in HTML context
                return {
                        '\n': '\\n',
                        '\r': '\\r',
                        '\t': '\\t',
                        ' ': ' '
                    }[p1] ||
                    '\\' + p1
            }
            if (p2) { // interpolation: {%=prop%}, or unescaped: {%#prop%}
                if (p2 === '=') {
                    return "'+_e(" + p3 + ")+'"
                }
                return "'+(" + p3 + "==null?'':" + p3 + ")+'"
            }
            if (p4) { // evaluation start tag: {%
                return "';"
            }
            if (p5) { // evaluation end tag: %}
                return "_s+='"
            }
        }
        tmpl.encReg = /[<>&"'\x00]/g // eslint-disable-line no-control-regex
        tmpl.encMap = {
            '<': '&lt;',
            '>': '&gt;',
            '&': '&amp;',
            '"': '&quot;',
            "'": '&#39;'
        }
        tmpl.encode = function(s) {
            return (s == null ? '' : '' + s).replace(
                tmpl.encReg,
                function(c) {
                    return tmpl.encMap[c] || ''
                }
            )
        }
        tmpl.arg = 'o'
        tmpl.helper = ",print=function(s,e){_s+=e?(s==null?'':s):_e(s);}" +
            ',include=function(s,d){_s+=tmpl(s,d);}'
        if (typeof define === 'function' && define.amd) {
            define(function() {
                return tmpl
            })
        } else if (typeof module === 'object' && module.exports) {
            module.exports = tmpl
        } else {
            $.tmpl = tmpl
        }
    }(this));
</script>

<script>
    function getFiles(fileElement) {
        // TODO: replace input.files with custom object containing appened browser files.
        var files = fileElement.files;
        var gennedTemplate = tmpl("template-upload", files);
        document.getElementById("tblUploadBody").innerHTML += gennedTemplate;
    }

    function formatBytes(bytes,decimals) {
        if(bytes == 0) return '0 Bytes';
        var k = 1000,
            dm = decimals || 2,
            sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
            i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
    }

    function fixedEncodeURIComponent (str) {
        return encodeURIComponent(str).replace(/[!'()]/g, escape).replace(/\*/g, "%2A");
    }
</script>

<script>
    //document.getElementById('file1').addEventListener('change', function () {
    //    var blobSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice,
    //        file = this.files[0],
    //        chunkSize = 2097152,                             // Read in chunks of 2MB
    //        chunks = Math.ceil(file.size / chunkSize),
    //        currentChunk = 0,
    //        spark = new SparkMD5.ArrayBuffer(),
    //        fileReader = new FileReader();

    //    fileReader.onload = function (e) {
    //        console.log('read chunk nr', currentChunk + 1, 'of', chunks);
    //        spark.append(e.target.result);                   // Append array buffer
    //        currentChunk++;

    //        document.getElementById('info').innerHTML = '' + (Math.round(currentChunk / chunks)*100) + '%';

    //        if (currentChunk < chunks) {
    //            setTimeout(loadNext(), 10);
    //            //loadNext();
    //        } else {
    //            console.log('finished loading');
    //            console.info('computed hash', spark.end());  // Compute hash
    //            document.getElementById('info').innerHTML = 'finished!';
    //        }
    //    };

    //    fileReader.onerror = function () {
    //        console.warn('oops, something went wrong.');
    //    };

    //    function loadNext() {
    //        var start = currentChunk * chunkSize,
    //            end = ((start + chunkSize) >= file.size) ? file.size : start + chunkSize;

    //        setTimeout(fileReader.readAsArrayBuffer(blobSlice.call(file, start, end)), 1);
    //        //fileReader.readAsArrayBuffer(blobSlice.call(file, start, end));
    //    }

    //    loadNext();
    //});

</script>